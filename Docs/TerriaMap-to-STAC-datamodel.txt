TerriaMap catalog -> STAC catalog

Motivation: Move the data model to a standardized format that will be implemented in the UI and supporting components.

--------------------------
The TerriaMap "workbench" is a data model that defined the features displayed on the UI.

The original TerriaMap format for the "workbench" was a file whose contents were in JSON format as follows (slightly truncated):

{
  "workbench": [
    "4257-2022102006-obs",
    "4257-2022102006-maxele63"
  ],
  "corsDomains": [
    "corsproxy.com",
    "programs.communications.gov.au",
    "www.asris.csiro.au",
    "mapsengine.google.com"
  ],
  "homeCamera": {
    "east": -61,
    "west": -96,
    "north": 46,
    "south": 20
  },
  "baseMaps": {
    "items": [
      {
        "item": {
          "id": "basemap-darkmatter",
          "name": "Dark Matter"
        },
        "image": "build/TerriaJS/images/dark-matter.png"
      },
      {
        "item": {
          "id": "basemap-bing-roads",
          "name": "Bing Maps Roads"
        },
        "image": "build/TerriaJS/images/bing-maps-roads.png"
      }
    ],
    "defaultBaseMapId": "basemap-bing-roads"
  },
  "viewerMode": "2D",
  "catalog": [
    {
      "id": "2022-10-25",
      "name": "ADCIRC Data - Run Date: 10-25-2022",
      "type": "group",
      "members": [
        {
          "id": "4288-2022102512-swan",
          "url": "https://apsviz-geoserver-dev.apps.renci.org/geoserver/ADCIRC_2022/wms/ADCIRC_2022?service=wms&version=1.3.0&request=GetCapabilities",
          "info": [
            {
              "name": "Event Date",
              "show": false,
              "content": "10-25-2022"
            }
          ],
          "name": "Date: 10-25-2022 Cycle: 12 Forecast Type: namforecast Location: RENCI Instance: ncsc123-nam-sb55.01 ADCIRC Grid: NCSC_SAB_v1.23 (swan)",
          "show": true,
          "type": "wms",
          "layers": "ADCIRC_2022:4288-2022102512-namforecast_swan_HS_max63",
          "styles": "swan_style",
          "legends": [
            {
              "url": "https://apsviz-geoserver-dev.apps.renci.org/geoserver/ADCIRC_2022/ows?service=WMS&request=GetLegendGraphic&TRANSPARENT=TRUE&LEGEND_OPTIONS=layout:horizontal&format=image%2Fpng&width=20&height=20&layer=4288-2022102512-namforecast_swan_HS_max63",
              "urlMimeType": "image/png"
            }
          ],
          "description": "This data is produced by the ADCIRC model and presented through the ADCIRC Prediction System Visualizer",
          "dataCustodian": "RENCI",
          "featureInfoTemplate": {
            "formats": {
              "GRAY_INDEX": {
                "type": "number",
                "maximumFractionDigits": 3
              }
            },
            "template": "<div><b>Value:</b>  {{GRAY_INDEX}}</div>"
          }
        }
      ]
    }
  ]
}

--------------------------

Data descriptions:
Please reference the data above for example data in these data descriptions. Fields with an asterick indicate potential

 - workbench: List of layers displayed on the UI .
 - corsDomains: List of FQDN sites.
 - homeCamera: bounded region shown at startup.
 - baseMaps: Various background maps.
 - viewerMode: 2D or 3D view mode
 - catalog: description of the data available for a certain date
   - id: Date of the data (MM/DD/YYYY)
   - name: Name of the data
   - type: Type of the data,
   - members: List of available visual products (map layers) for this date
     - info: List of view state of product
       - name: Name of data
       - show: Hide/show flag - true/false 
       - content: detail on the data
     - name: Name of the member
     - show: Hide/show flag true/false
     - type: The type of visual layer
     - layers: Name of the layer
     - styles: Style of the data
     - legends:
       - url:    
       - urlMimeType:
     - description: Provenence of the data
     - dataCustodian: Creator of the data
     - featureInfoTemplate:
     	- formats:
     	  - format type name:
     	    - type:
     	    - maximumFractionDigits:
        - template:
     
--------------------------
The TerriaMap file-based model was used to derive the DB model as shown below. the relationships in the original data were kept intact for this model.

table catalog
(
    id              date            sequence, primary key
    catalog_type_id integer         references the catalog_type_lu table
    catalog_base_id integer         references the catalog_base table
    is_external     boolean 		
    name            varchar(250)
)


table catalog_base
(
    id          integer     		sequence, primary key,
    workbench   varchar(300) 
    cors_domain varchar(250) 
    home_camera varchar(250) 
    base_maps   varchar(3000)
    viewer_mode varchar(5) 			default '2D'
)


table catalog_member
(
    id              bigint      	sequence, primary key
    catalog_id      date			references the catalog table
    member_def      json			This column represents a single entry of a "members" object defined above
    grid_type       varchar(50)
    event_type      varchar(50)
    run_date        varchar(50)
    instance_name   varchar(50)
    met_class       varchar(50) 
    storm_name      varchar(50)
    cycle           varchar(50)
    advisory_number varchar(50)
    project_code    varchar(50)
    product_type    varchar(50)
)


table catalog_type_lu
(
    id          integer 			sequence, primary key
    name        varchar(50)
    description varchar(100)
)

---------------------------
STAC high level overview: https://stacspec.org/en/about/stac-spec/,
STAC specification index: https://github.com/radiantearth/stac-spec/
STAC detailed overview: https://github.com/radiantearth/stac-spec/blob/master/overview.md
STAC best practices (mentions leaflet): https://github.com/radiantearth/stac-spec/blob/master/best-practices.md

The STAC data model for a catalog is defined at: https://github.com/radiantearth/stac-spec/catalog-spec/json-schema/catalog.json
"A Catalog provides links to Items or to other Catalogs"

The STAC data model for a collection is defined at: https://github.com/radiantearth/collection-spec/json-schema/collection.json
"Collection entities can be used just like Catalog entities to provide structure, as they provide all the same options for linking and organizing"
"A Collection will generally consist of a set of assets that are defined with the same properties and share higher level metadata"

The STAC data model for an item is defined at: https://github.com/radiantearth/stac-spec/item-spec/json-schema/item.json
"an Item object represents a unit of data and metadata, typically representing a single scene of data at one place and time"

---------------------------
Expectations implementing STAC:
 - PgSTAC: PGDatabase Schema and Functions for Storing and Accessing STAC collections and items in PostgreSQL
 - STAC FASTAPI: https://github.com/stac-utils/stac-fastapi
 - Modifications to the UI for the new data model
 - Creation of stored functions to get filtered data to the UI.
 - Concern: there will be a disconnect between the apsviz DB and PgSTAC if they are not merged.

---------------------------
Transforming from the TerriaMap data model into the STAC data model.

TerriaMap catalog -> STAC catalog analogs:
---------------
catalog, catalog_base -> Catalog or Collection
catalog_member -> Item

Example STAC data:
---------------
Item:
{
    "stac_version": "1.0.0",
    "type": "Feature",
    "id": "20201211_223832_CS2",
    "bbox": [],
    "geometry": {},
    "properties": {},
    "collection": "simple-collection",
    "links": [],
    "assets": {}
}

Catalog:
{
    "stac_version": "1.0.0",
    "type": "Catalog",
    "id": "20201211_223832_CS2",
    "description": "A simple catalog example",
    "links": []
}

Collection:
{
    "stac_version": "1.0.0",
    "type": "Collection",
    "license": "ISC",
    "id": "20201211_223832_CS2",
    "description": "A simple collection example",
    "links": [],
    "extent": {},
    "summaries": {}
}

------------------------------------
Questions/observations converting from TerriaMap entry to STAC
 - How can STAC.Item.bbox and STAC.Item.geometry be leveraged on the UI
 - STAC.Item.properties will house all TerriaMap.catalog_member.member_def data
 - STAC.Catalog/Collection will house TerriaMap.Catalog_base data. not yet sure how though
 - How will the TerriaMap.catalog_base data be housed in STAC?
   - Which STAC table will have a property indicating it has been chosen as "default" for a "workbench"?
   - will cors_domain, home_camera, viewer_mode and base_maps still be needed?
 - It is presumed that user profile/preferences will not be housed in a STAC DB.


------------------------------------
Detailed field mapping (TerriaMap -> STAC)


------------------------------------
Expected usage:
 - UI will be adjusted to accept the STAC data model.
 - UI will be configured to use a new web service URL.
 - Optional potential: UI may be able to take a STAC object dragged onto the map surface and render it.

------------------------------------
Expected task list:
 - Install and configure PgSTAC.
 - Install and configure STAC FASTAPI.
 - Modification of that component that inserts catalog data.
 - Addition of stored function to insert STAC data into the DB.
 - Conversion of existing TERRIAMap data -> STAC data.
 - Modification of UI to support the new data model.

